# function standardizes everything to 0 - 1
range01 <- function(x){
  if(min(x) == max(x)){
    x <- rep(0, length(x))
    return(x)
  }
  (x-min(x))/(max(x)-min(x))
}

DiffFrontier <- function(treatment, dataset, drop){
  covs <- colnames(dataset)[!(colnames(dataset) %in% drop)]
 
# Standardize
  for(col in colnames(dataset)){
    dataset[,colnames(dataset) == col] <- range01(dataset[,colnames(dataset) == col])
  }

  dropped <- c(0)
  best.rec <- c()
  frontier <- c()

  for(i in 1:nrow(dataset)){
    best <- 20000
    for(r in seq(nrow(dataset))[!(seq(nrow(dataset)) %in% dropped)]){
      t.inds <- dataset$treated == 1 & !(seq(1,length(dataset$treated)) %in% c(dropped,r))
      if(sum(t.inds) == 0){break}
      c.inds <- dataset$treated == 0 & !(seq(1,length(dataset$treated)) %in% c(dropped,r))
      if(sum(c.inds) == 0){break}

      diff <- 0
      
      for(cov in covs){
        diff <- diff + abs(mean(dataset[t.inds, cov]) - mean(dataset[c.inds, cov]))
      }

      if(diff < best){
        dropped[i] <- r
        best <- diff
      }
    }
    frontier <- c(frontier, best)
#    if(tail(frontier, 1) > tail(frontier, 2)[1]){
 #     frontier <- frontier[1:length(frontier) - 1]
  #    dropped <- dropped[1:length(dropped) - 1]
   #   break} 
  }
  return(list(balance = frontier, drops = dropped))
}



